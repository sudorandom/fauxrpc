// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stubs/v1/stubs_service.proto

package stubsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/sudorandom/fauxrpc/private/gen/stubs/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StubsServiceName is the fully-qualified name of the StubsService service.
	StubsServiceName = "stubs.v1.StubsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StubsServiceAddStubsProcedure is the fully-qualified name of the StubsService's AddStubs RPC.
	StubsServiceAddStubsProcedure = "/stubs.v1.StubsService/AddStubs"
	// StubsServiceRemoveStubsProcedure is the fully-qualified name of the StubsService's RemoveStubs
	// RPC.
	StubsServiceRemoveStubsProcedure = "/stubs.v1.StubsService/RemoveStubs"
	// StubsServiceRemoveAllStubsProcedure is the fully-qualified name of the StubsService's
	// RemoveAllStubs RPC.
	StubsServiceRemoveAllStubsProcedure = "/stubs.v1.StubsService/RemoveAllStubs"
	// StubsServiceListStubsProcedure is the fully-qualified name of the StubsService's ListStubs RPC.
	StubsServiceListStubsProcedure = "/stubs.v1.StubsService/ListStubs"
)

// StubsServiceClient is a client for the stubs.v1.StubsService service.
type StubsServiceClient interface {
	AddStubs(context.Context, *connect.Request[v1.AddStubsRequest]) (*connect.Response[v1.AddStubsResponse], error)
	RemoveStubs(context.Context, *connect.Request[v1.RemoveStubsRequest]) (*connect.Response[v1.RemoveStubsResponse], error)
	RemoveAllStubs(context.Context, *connect.Request[v1.RemoveAllStubsRequest]) (*connect.Response[v1.RemoveAllStubsResponse], error)
	ListStubs(context.Context, *connect.Request[v1.ListStubsRequest]) (*connect.Response[v1.ListStubsResponse], error)
}

// NewStubsServiceClient constructs a client for the stubs.v1.StubsService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStubsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StubsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	stubsServiceMethods := v1.File_stubs_v1_stubs_service_proto.Services().ByName("StubsService").Methods()
	return &stubsServiceClient{
		addStubs: connect.NewClient[v1.AddStubsRequest, v1.AddStubsResponse](
			httpClient,
			baseURL+StubsServiceAddStubsProcedure,
			connect.WithSchema(stubsServiceMethods.ByName("AddStubs")),
			connect.WithClientOptions(opts...),
		),
		removeStubs: connect.NewClient[v1.RemoveStubsRequest, v1.RemoveStubsResponse](
			httpClient,
			baseURL+StubsServiceRemoveStubsProcedure,
			connect.WithSchema(stubsServiceMethods.ByName("RemoveStubs")),
			connect.WithClientOptions(opts...),
		),
		removeAllStubs: connect.NewClient[v1.RemoveAllStubsRequest, v1.RemoveAllStubsResponse](
			httpClient,
			baseURL+StubsServiceRemoveAllStubsProcedure,
			connect.WithSchema(stubsServiceMethods.ByName("RemoveAllStubs")),
			connect.WithClientOptions(opts...),
		),
		listStubs: connect.NewClient[v1.ListStubsRequest, v1.ListStubsResponse](
			httpClient,
			baseURL+StubsServiceListStubsProcedure,
			connect.WithSchema(stubsServiceMethods.ByName("ListStubs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// stubsServiceClient implements StubsServiceClient.
type stubsServiceClient struct {
	addStubs       *connect.Client[v1.AddStubsRequest, v1.AddStubsResponse]
	removeStubs    *connect.Client[v1.RemoveStubsRequest, v1.RemoveStubsResponse]
	removeAllStubs *connect.Client[v1.RemoveAllStubsRequest, v1.RemoveAllStubsResponse]
	listStubs      *connect.Client[v1.ListStubsRequest, v1.ListStubsResponse]
}

// AddStubs calls stubs.v1.StubsService.AddStubs.
func (c *stubsServiceClient) AddStubs(ctx context.Context, req *connect.Request[v1.AddStubsRequest]) (*connect.Response[v1.AddStubsResponse], error) {
	return c.addStubs.CallUnary(ctx, req)
}

// RemoveStubs calls stubs.v1.StubsService.RemoveStubs.
func (c *stubsServiceClient) RemoveStubs(ctx context.Context, req *connect.Request[v1.RemoveStubsRequest]) (*connect.Response[v1.RemoveStubsResponse], error) {
	return c.removeStubs.CallUnary(ctx, req)
}

// RemoveAllStubs calls stubs.v1.StubsService.RemoveAllStubs.
func (c *stubsServiceClient) RemoveAllStubs(ctx context.Context, req *connect.Request[v1.RemoveAllStubsRequest]) (*connect.Response[v1.RemoveAllStubsResponse], error) {
	return c.removeAllStubs.CallUnary(ctx, req)
}

// ListStubs calls stubs.v1.StubsService.ListStubs.
func (c *stubsServiceClient) ListStubs(ctx context.Context, req *connect.Request[v1.ListStubsRequest]) (*connect.Response[v1.ListStubsResponse], error) {
	return c.listStubs.CallUnary(ctx, req)
}

// StubsServiceHandler is an implementation of the stubs.v1.StubsService service.
type StubsServiceHandler interface {
	AddStubs(context.Context, *connect.Request[v1.AddStubsRequest]) (*connect.Response[v1.AddStubsResponse], error)
	RemoveStubs(context.Context, *connect.Request[v1.RemoveStubsRequest]) (*connect.Response[v1.RemoveStubsResponse], error)
	RemoveAllStubs(context.Context, *connect.Request[v1.RemoveAllStubsRequest]) (*connect.Response[v1.RemoveAllStubsResponse], error)
	ListStubs(context.Context, *connect.Request[v1.ListStubsRequest]) (*connect.Response[v1.ListStubsResponse], error)
}

// NewStubsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStubsServiceHandler(svc StubsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	stubsServiceMethods := v1.File_stubs_v1_stubs_service_proto.Services().ByName("StubsService").Methods()
	stubsServiceAddStubsHandler := connect.NewUnaryHandler(
		StubsServiceAddStubsProcedure,
		svc.AddStubs,
		connect.WithSchema(stubsServiceMethods.ByName("AddStubs")),
		connect.WithHandlerOptions(opts...),
	)
	stubsServiceRemoveStubsHandler := connect.NewUnaryHandler(
		StubsServiceRemoveStubsProcedure,
		svc.RemoveStubs,
		connect.WithSchema(stubsServiceMethods.ByName("RemoveStubs")),
		connect.WithHandlerOptions(opts...),
	)
	stubsServiceRemoveAllStubsHandler := connect.NewUnaryHandler(
		StubsServiceRemoveAllStubsProcedure,
		svc.RemoveAllStubs,
		connect.WithSchema(stubsServiceMethods.ByName("RemoveAllStubs")),
		connect.WithHandlerOptions(opts...),
	)
	stubsServiceListStubsHandler := connect.NewUnaryHandler(
		StubsServiceListStubsProcedure,
		svc.ListStubs,
		connect.WithSchema(stubsServiceMethods.ByName("ListStubs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/stubs.v1.StubsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StubsServiceAddStubsProcedure:
			stubsServiceAddStubsHandler.ServeHTTP(w, r)
		case StubsServiceRemoveStubsProcedure:
			stubsServiceRemoveStubsHandler.ServeHTTP(w, r)
		case StubsServiceRemoveAllStubsProcedure:
			stubsServiceRemoveAllStubsHandler.ServeHTTP(w, r)
		case StubsServiceListStubsProcedure:
			stubsServiceListStubsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStubsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStubsServiceHandler struct{}

func (UnimplementedStubsServiceHandler) AddStubs(context.Context, *connect.Request[v1.AddStubsRequest]) (*connect.Response[v1.AddStubsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stubs.v1.StubsService.AddStubs is not implemented"))
}

func (UnimplementedStubsServiceHandler) RemoveStubs(context.Context, *connect.Request[v1.RemoveStubsRequest]) (*connect.Response[v1.RemoveStubsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stubs.v1.StubsService.RemoveStubs is not implemented"))
}

func (UnimplementedStubsServiceHandler) RemoveAllStubs(context.Context, *connect.Request[v1.RemoveAllStubsRequest]) (*connect.Response[v1.RemoveAllStubsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stubs.v1.StubsService.RemoveAllStubs is not implemented"))
}

func (UnimplementedStubsServiceHandler) ListStubs(context.Context, *connect.Request[v1.ListStubsRequest]) (*connect.Response[v1.ListStubsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stubs.v1.StubsService.ListStubs is not implemented"))
}
