// @generated by protoc-gen-es v2.6.2
// @generated from file test/v1/test.proto (package test.v1, edition 2023)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { JsonObject, Message } from "@bufbuild/protobuf";
import type { DoubleValue, Duration, FieldMask, StringValue, Timestamp, Value } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file test/v1/test.proto.
 */
export declare const file_test_v1_test: GenFile;

/**
 * @generated from message test.v1.ParameterValues
 */
export declare type ParameterValues = Message<"test.v1.ParameterValues"> & {
  /**
   * scalar types
   *
   * @generated from field: double double_value = 1;
   */
  doubleValue: number;

  /**
   * @generated from field: float float_value = 2;
   */
  floatValue: number;

  /**
   * @generated from field: int32 int32_value = 3;
   */
  int32Value: number;

  /**
   * @generated from field: int64 int64_value = 4;
   */
  int64Value: bigint;

  /**
   * @generated from field: uint32 uint32_value = 5;
   */
  uint32Value: number;

  /**
   * @generated from field: uint64 uint64_value = 6;
   */
  uint64Value: bigint;

  /**
   * @generated from field: sint32 sint32_value = 7;
   */
  sint32Value: number;

  /**
   * @generated from field: sint64 sint64_value = 8;
   */
  sint64Value: bigint;

  /**
   * @generated from field: fixed32 fixed32_value = 9;
   */
  fixed32Value: number;

  /**
   * @generated from field: fixed64 fixed64_value = 10;
   */
  fixed64Value: bigint;

  /**
   * @generated from field: sfixed32 sfixed32_value = 11;
   */
  sfixed32Value: number;

  /**
   * @generated from field: sfixed64 sfixed64_value = 12;
   */
  sfixed64Value: bigint;

  /**
   * @generated from field: bool bool_value = 13;
   */
  boolValue: boolean;

  /**
   * @generated from field: string string_value = 14;
   */
  stringValue: string;

  /**
   * @generated from field: bytes bytes_value = 15;
   */
  bytesValue: Uint8Array;

  /**
   * scalar wrappers
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 16;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: google.protobuf.Duration duration = 17;
   */
  duration?: Duration;

  /**
   * @generated from field: google.protobuf.BoolValue bool_value_wrapper = 18;
   */
  boolValueWrapper?: boolean;

  /**
   * @generated from field: google.protobuf.Int32Value int32_value_wrapper = 19;
   */
  int32ValueWrapper?: number;

  /**
   * @generated from field: google.protobuf.Int64Value int64_value_wrapper = 20;
   */
  int64ValueWrapper?: bigint;

  /**
   * @generated from field: google.protobuf.UInt32Value uint32_value_wrapper = 21;
   */
  uint32ValueWrapper?: number;

  /**
   * @generated from field: google.protobuf.UInt64Value uint64_value_wrapper = 22;
   */
  uint64ValueWrapper?: bigint;

  /**
   * @generated from field: google.protobuf.FloatValue float_value_wrapper = 23;
   */
  floatValueWrapper?: number;

  /**
   * @generated from field: google.protobuf.DoubleValue double_value_wrapper = 24;
   */
  doubleValueWrapper?: number;

  /**
   * @generated from field: google.protobuf.BytesValue bytes_value_wrapper = 25;
   */
  bytesValueWrapper?: Uint8Array;

  /**
   * @generated from field: google.protobuf.StringValue string_value_wrapper = 26;
   */
  stringValueWrapper?: string;

  /**
   * @generated from field: google.protobuf.FieldMask field_mask = 27;
   */
  fieldMask?: FieldMask;

  /**
   * @generated from field: test.v1.ParameterValues.Enum enum_value = 28;
   */
  enumValue: ParameterValues_Enum;

  /**
   * complex types
   *
   * @generated from field: repeated test.v1.ParameterValues.Enum enum_list = 29;
   */
  enumList: ParameterValues_Enum[];

  /**
   * @generated from field: repeated double double_list = 30;
   */
  doubleList: number[];

  /**
   * @generated from field: repeated google.protobuf.DoubleValue double_value_list = 31;
   */
  doubleValueList: DoubleValue[];

  /**
   * @generated from oneof test.v1.ParameterValues.oneof
   */
  oneof: {
    /**
     * @generated from field: double oneof_double_value = 33;
     */
    value: number;
    case: "oneofDoubleValue";
  } | {
    /**
     * @generated from field: google.protobuf.DoubleValue oneof_double_value_wrapper = 34;
     */
    value: DoubleValue;
    case: "oneofDoubleValueWrapper";
  } | {
    /**
     * @generated from field: test.v1.ParameterValues.Enum oneof_enum_value = 35;
     */
    value: ParameterValues_Enum;
    case: "oneofEnumValue";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: test.v1.ParameterValues.Nested nested = 36;
   */
  nested?: ParameterValues_Nested;

  /**
   * @generated from field: test.v1.ParameterValues recursive = 37;
   */
  recursive?: ParameterValues;

  /**
   * unsupported
   *
   * @generated from field: map<string, string> string_map = 38;
   */
  stringMap: { [key: string]: string };

  /**
   * @generated from field: map<string, google.protobuf.StringValue> string_value_map = 39;
   */
  stringValueMap: { [key: string]: StringValue };

  /**
   * @generated from field: map<string, test.v1.ParameterValues.Enum> enum_map = 40;
   */
  enumMap: { [key: string]: ParameterValues_Enum };

  /**
   * @generated from field: map<string, test.v1.ParameterValues.Nested> nested_map = 41;
   */
  nestedMap: { [key: string]: ParameterValues_Nested };

  /**
   * @generated from field: google.protobuf.Struct struct_value = 42;
   */
  structValue?: JsonObject;

  /**
   * @generated from field: google.protobuf.Value value = 43;
   */
  value?: Value;

  /**
   * @generated from field: repeated test.v1.ParameterValues recursive_list = 44;
   */
  recursiveList: ParameterValues[];
};

/**
 * Describes the message test.v1.ParameterValues.
 * Use `create(ParameterValuesSchema)` to create a new message.
 */
export declare const ParameterValuesSchema: GenMessage<ParameterValues>;

/**
 * @generated from message test.v1.ParameterValues.Nested
 */
export declare type ParameterValues_Nested = Message<"test.v1.ParameterValues.Nested"> & {
  /**
   * @generated from field: double double_value = 1;
   */
  doubleValue: number;

  /**
   * @generated from field: google.protobuf.DoubleValue double_value_wrapper = 2;
   */
  doubleValueWrapper?: number;

  /**
   * @generated from field: test.v1.ParameterValues.Nested.Enum enum_value = 3;
   */
  enumValue: ParameterValues_Nested_Enum;
};

/**
 * Describes the message test.v1.ParameterValues.Nested.
 * Use `create(ParameterValues_NestedSchema)` to create a new message.
 */
export declare const ParameterValues_NestedSchema: GenMessage<ParameterValues_Nested>;

/**
 * @generated from enum test.v1.ParameterValues.Nested.Enum
 */
export enum ParameterValues_Nested_Enum {
  /**
   * @generated from enum value: ENUM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ENUM_VALUE = 1;
   */
  VALUE = 1,
}

/**
 * Describes the enum test.v1.ParameterValues.Nested.Enum.
 */
export declare const ParameterValues_Nested_EnumSchema: GenEnum<ParameterValues_Nested_Enum>;

/**
 * enum types
 *
 * @generated from enum test.v1.ParameterValues.Enum
 */
export enum ParameterValues_Enum {
  /**
   * @generated from enum value: ENUM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ENUM_VALUE = 1;
   */
  VALUE = 1,
}

/**
 * Describes the enum test.v1.ParameterValues.Enum.
 */
export declare const ParameterValues_EnumSchema: GenEnum<ParameterValues_Enum>;

/**
 * @generated from message test.v1.AllTypes
 */
export declare type AllTypes = Message<"test.v1.AllTypes"> & {
  /**
   * scalar types
   *
   * @generated from field: double double_value = 1;
   */
  doubleValue: number;

  /**
   * @generated from field: float float_value = 2;
   */
  floatValue: number;

  /**
   * @generated from field: int32 int32_value = 3;
   */
  int32Value: number;

  /**
   * @generated from field: int64 int64_value = 4;
   */
  int64Value: bigint;

  /**
   * @generated from field: uint32 uint32_value = 5;
   */
  uint32Value: number;

  /**
   * @generated from field: uint64 uint64_value = 6;
   */
  uint64Value: bigint;

  /**
   * @generated from field: sint32 sint32_value = 7;
   */
  sint32Value: number;

  /**
   * @generated from field: sint64 sint64_value = 8;
   */
  sint64Value: bigint;

  /**
   * @generated from field: fixed32 fixed32_value = 9;
   */
  fixed32Value: number;

  /**
   * @generated from field: fixed64 fixed64_value = 10;
   */
  fixed64Value: bigint;

  /**
   * @generated from field: sfixed32 sfixed32_value = 11;
   */
  sfixed32Value: number;

  /**
   * @generated from field: sfixed64 sfixed64_value = 12;
   */
  sfixed64Value: bigint;

  /**
   * @generated from field: bool bool_value = 13;
   */
  boolValue: boolean;

  /**
   * @generated from field: string string_value = 14;
   */
  stringValue: string;

  /**
   * @generated from field: bytes bytes_value = 15;
   */
  bytesValue: Uint8Array;

  /**
   * repeated types
   *
   * @generated from field: repeated double double_list = 16;
   */
  doubleList: number[];

  /**
   * @generated from field: repeated float float_list = 17;
   */
  floatList: number[];

  /**
   * @generated from field: repeated int32 int32_list = 18;
   */
  int32List: number[];

  /**
   * @generated from field: repeated int64 int64_list = 19;
   */
  int64List: bigint[];

  /**
   * @generated from field: repeated uint32 uint32_list = 20;
   */
  uint32List: number[];

  /**
   * @generated from field: repeated uint64 uint64_list = 21;
   */
  uint64List: bigint[];

  /**
   * @generated from field: repeated sint32 sint32_list = 22;
   */
  sint32List: number[];

  /**
   * @generated from field: repeated sint64 sint64_list = 23;
   */
  sint64List: bigint[];

  /**
   * @generated from field: repeated fixed32 fixed32_list = 24;
   */
  fixed32List: number[];

  /**
   * @generated from field: repeated fixed64 fixed64_list = 25;
   */
  fixed64List: bigint[];

  /**
   * @generated from field: repeated sfixed32 sfixed32_list = 26;
   */
  sfixed32List: number[];

  /**
   * @generated from field: repeated sfixed64 sfixed64_list = 27;
   */
  sfixed64List: bigint[];

  /**
   * @generated from field: repeated bool bool_list = 28;
   */
  boolList: boolean[];

  /**
   * @generated from field: repeated string string_list = 29;
   */
  stringList: string[];

  /**
   * @generated from field: repeated bytes bytes_list = 30;
   */
  bytesList: Uint8Array[];

  /**
   * map key types
   *
   * @generated from field: map<int32, string> int32_to_string_map = 31;
   */
  int32ToStringMap: { [key: number]: string };

  /**
   * @generated from field: map<int64, string> int64_to_string_map = 32;
   */
  int64ToStringMap: { [key: string]: string };

  /**
   * @generated from field: map<uint32, string> uint32_to_string_map = 33;
   */
  uint32ToStringMap: { [key: number]: string };

  /**
   * @generated from field: map<uint64, string> uint64_to_string_map = 34;
   */
  uint64ToStringMap: { [key: string]: string };

  /**
   * @generated from field: map<sint32, string> sint32_to_string_map = 35;
   */
  sint32ToStringMap: { [key: number]: string };

  /**
   * @generated from field: map<sint64, string> sint64_to_string_map = 36;
   */
  sint64ToStringMap: { [key: string]: string };

  /**
   * @generated from field: map<fixed32, string> fixed32_to_string_map = 37;
   */
  fixed32ToStringMap: { [key: number]: string };

  /**
   * @generated from field: map<fixed64, string> fixed64_to_string_map = 38;
   */
  fixed64ToStringMap: { [key: string]: string };

  /**
   * @generated from field: map<sfixed32, string> sfixed32_to_string_map = 39;
   */
  sfixed32ToStringMap: { [key: number]: string };

  /**
   * @generated from field: map<sfixed64, string> sfixed64_to_string_map = 40;
   */
  sfixed64ToStringMap: { [key: string]: string };

  /**
   * @generated from field: map<bool, string> bool_to_string_map = 41;
   */
  boolToStringMap: { [key: string]: string };

  /**
   * @generated from field: map<string, string> string_to_string_map = 42;
   */
  stringToStringMap: { [key: string]: string };

  /**
   * map value types
   *
   * @generated from field: map<string, double> double_map = 43;
   */
  doubleMap: { [key: string]: number };

  /**
   * @generated from field: map<string, float> float_map = 44;
   */
  floatMap: { [key: string]: number };

  /**
   * @generated from field: map<string, int32> int32_map = 45;
   */
  int32Map: { [key: string]: number };

  /**
   * @generated from field: map<string, int64> int64_map = 46;
   */
  int64Map: { [key: string]: bigint };

  /**
   * @generated from field: map<string, uint32> uint32_map = 47;
   */
  uint32Map: { [key: string]: number };

  /**
   * @generated from field: map<string, uint64> uint64_map = 48;
   */
  uint64Map: { [key: string]: bigint };

  /**
   * @generated from field: map<string, sint32> sint32_map = 49;
   */
  sint32Map: { [key: string]: number };

  /**
   * @generated from field: map<string, sint64> sint64_map = 50;
   */
  sint64Map: { [key: string]: bigint };

  /**
   * @generated from field: map<string, fixed32> fixed32_map = 51;
   */
  fixed32Map: { [key: string]: number };

  /**
   * @generated from field: map<string, fixed64> fixed64_map = 52;
   */
  fixed64Map: { [key: string]: bigint };

  /**
   * @generated from field: map<string, sfixed32> sfixed32_map = 53;
   */
  sfixed32Map: { [key: string]: number };

  /**
   * @generated from field: map<string, sfixed64> sfixed64_map = 54;
   */
  sfixed64Map: { [key: string]: bigint };

  /**
   * @generated from field: map<string, bool> bool_map = 55;
   */
  boolMap: { [key: string]: boolean };

  /**
   * @generated from field: map<string, string> string_map = 56;
   */
  stringMap: { [key: string]: string };

  /**
   * @generated from field: map<string, bytes> bytes_map = 57;
   */
  bytesMap: { [key: string]: Uint8Array };

  /**
   * explicit presence types
   *
   * @generated from field: double opt_double_value = 58 [features.field_presence = EXPLICIT];
   */
  optDoubleValue: number;

  /**
   * @generated from field: float opt_float_value = 59 [features.field_presence = EXPLICIT];
   */
  optFloatValue: number;

  /**
   * @generated from field: int32 opt_int32_value = 60 [features.field_presence = EXPLICIT];
   */
  optInt32Value: number;

  /**
   * @generated from field: int64 opt_int64_value = 61 [features.field_presence = EXPLICIT];
   */
  optInt64Value: bigint;

  /**
   * @generated from field: uint32 opt_uint32_value = 62 [features.field_presence = EXPLICIT];
   */
  optUint32Value: number;

  /**
   * @generated from field: uint64 opt_uint64_value = 63 [features.field_presence = EXPLICIT];
   */
  optUint64Value: bigint;

  /**
   * @generated from field: sint32 opt_sint32_value = 64 [features.field_presence = EXPLICIT];
   */
  optSint32Value: number;

  /**
   * @generated from field: sint64 opt_sint64_value = 65 [features.field_presence = EXPLICIT];
   */
  optSint64Value: bigint;

  /**
   * @generated from field: fixed32 opt_fixed32_value = 66 [features.field_presence = EXPLICIT];
   */
  optFixed32Value: number;

  /**
   * @generated from field: fixed64 opt_fixed64_value = 67 [features.field_presence = EXPLICIT];
   */
  optFixed64Value: bigint;

  /**
   * @generated from field: sfixed32 opt_sfixed32_value = 68 [features.field_presence = EXPLICIT];
   */
  optSfixed32Value: number;

  /**
   * @generated from field: sfixed64 opt_sfixed64_value = 69 [features.field_presence = EXPLICIT];
   */
  optSfixed64Value: bigint;

  /**
   * @generated from field: bool opt_bool_value = 70 [features.field_presence = EXPLICIT];
   */
  optBoolValue: boolean;

  /**
   * @generated from field: string opt_string_value = 71 [features.field_presence = EXPLICIT];
   */
  optStringValue: string;

  /**
   * @generated from field: bytes opt_bytes_value = 72 [features.field_presence = EXPLICIT];
   */
  optBytesValue: Uint8Array;

  /**
   * @generated from field: test.v1.AllTypes msg_value = 73;
   */
  msgValue?: AllTypes;

  /**
   * @generated from field: test.v1.AllTypes.Enum enum_value = 74;
   */
  enumValue: AllTypes_Enum;

  /**
   * @generated from field: test.v1.AllTypes opt_msg_value = 75 [features.field_presence = EXPLICIT];
   */
  optMsgValue?: AllTypes;

  /**
   * @generated from field: test.v1.AllTypes.Enum opt_enum_value = 76 [features.field_presence = EXPLICIT];
   */
  optEnumValue: AllTypes_Enum;

  /**
   * @generated from field: repeated test.v1.AllTypes msg_list = 77;
   */
  msgList: AllTypes[];

  /**
   * @generated from field: repeated test.v1.AllTypes.Enum enum_list = 78;
   */
  enumList: AllTypes_Enum[];

  /**
   * @generated from field: map<string, test.v1.AllTypes> msg_map = 79;
   */
  msgMap: { [key: string]: AllTypes };

  /**
   * @generated from field: map<string, test.v1.AllTypes.Enum> enum_map = 80;
   */
  enumMap: { [key: string]: AllTypes_Enum };

  /**
   * oneof
   *
   * @generated from oneof test.v1.AllTypes.option
   */
  option: {
    /**
     * @generated from field: double double_option = 81;
     */
    value: number;
    case: "doubleOption";
  } | {
    /**
     * @generated from field: float float_option = 82;
     */
    value: number;
    case: "floatOption";
  } | {
    /**
     * @generated from field: int32 int32_option = 83;
     */
    value: number;
    case: "int32Option";
  } | {
    /**
     * @generated from field: int64 int64_option = 84;
     */
    value: bigint;
    case: "int64Option";
  } | {
    /**
     * @generated from field: uint32 uint32_option = 85;
     */
    value: number;
    case: "uint32Option";
  } | {
    /**
     * @generated from field: uint64 uint64_option = 86;
     */
    value: bigint;
    case: "uint64Option";
  } | {
    /**
     * @generated from field: sint32 sint32_option = 87;
     */
    value: number;
    case: "sint32Option";
  } | {
    /**
     * @generated from field: sint64 sint64_option = 88;
     */
    value: bigint;
    case: "sint64Option";
  } | {
    /**
     * @generated from field: fixed32 fixed32_option = 89;
     */
    value: number;
    case: "fixed32Option";
  } | {
    /**
     * @generated from field: fixed64 fixed64_option = 90;
     */
    value: bigint;
    case: "fixed64Option";
  } | {
    /**
     * @generated from field: sfixed32 sfixed32_option = 91;
     */
    value: number;
    case: "sfixed32Option";
  } | {
    /**
     * @generated from field: sfixed64 sfixed64_option = 92;
     */
    value: bigint;
    case: "sfixed64Option";
  } | {
    /**
     * @generated from field: bool bool_option = 93;
     */
    value: boolean;
    case: "boolOption";
  } | {
    /**
     * @generated from field: string string_option = 94;
     */
    value: string;
    case: "stringOption";
  } | {
    /**
     * @generated from field: bytes bytes_option = 95;
     */
    value: Uint8Array;
    case: "bytesOption";
  } | {
    /**
     * @generated from field: test.v1.AllTypes msg_option = 96;
     */
    value: AllTypes;
    case: "msgOption";
  } | {
    /**
     * @generated from field: test.v1.AllTypes.Enum enum_option = 97;
     */
    value: AllTypes_Enum;
    case: "enumOption";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message test.v1.AllTypes.
 * Use `create(AllTypesSchema)` to create a new message.
 */
export declare const AllTypesSchema: GenMessage<AllTypes>;

/**
 * named types
 *
 * @generated from enum test.v1.AllTypes.Enum
 */
export enum AllTypes_Enum {
  /**
   * @generated from enum value: ENUM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ENUM_ONE = 1;
   */
  ONE = 1,

  /**
   * @generated from enum value: ENUM_TWO = 2;
   */
  TWO = 2,
}

/**
 * Describes the enum test.v1.AllTypes.Enum.
 */
export declare const AllTypes_EnumSchema: GenEnum<AllTypes_Enum>;

