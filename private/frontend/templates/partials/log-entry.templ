package partials

import (
	"encoding/json"
	"fmt"
	"net/http"
	"sort"
	"strings"
	"time"
	"bytes"

	"github.com/sudorandom/fauxrpc/private/log"
)

func getStatusColor(status int) string {
	if status >= 500 {
		return "bg-red-500 text-red-100"
	}
	if status >= 400 {
		return "bg-yellow-500 text-yellow-100"
	}
	if status >= 200 {
		return "bg-green-500 text-green-100"
	}
	return "bg-gray-500 text-gray-100"
}

func formatHeaders(raw json.RawMessage) string {
    // Gracefully handle nil, empty, or "null" JSON
    if len(raw) == 0 || string(raw) == "null" {
        return "n/a"
    }

    var headers http.Header
    if err := json.Unmarshal(raw, &headers); err != nil {
        // If it's not valid JSON for headers, just show the raw string
        return fmt.Sprintf("Invalid headers JSON: %s\nRaw: %s", err.Error(), string(raw))
    }

    if len(headers) == 0 {
        return "n/a"
    }

    // Sort keys for consistent order
    keys := make([]string, 0, len(headers))
    for k := range headers {
        keys = append(keys, k)
    }
    sort.Strings(keys)

    var builder strings.Builder
    for _, k := range keys {
        for _, v := range headers[k] {
            builder.WriteString(fmt.Sprintf("%s: %s\n", k, v))
        }
    }
    return strings.TrimSpace(builder.String())
}


func prettyPrintJSON(data json.RawMessage) string {
    // Gracefully handle nil, empty, or "null" JSON
    if len(data) == 0 || string(data) == "null" {
        return "n/a"
    }

    var indentedJSON bytes.Buffer
    if err := json.Indent(&indentedJSON, data, "", "  "); err != nil {
        // If it can't be indented, it might not be JSON. Show the raw string.
        return string(data)
    }
    return indentedJSON.String()
}

templ LogEntry(entry *log.LogEntry) {
	<details class="bg-gray-800/60 border border-gray-700 rounded-lg mb-3 overflow-hidden">
		<summary class="w-full p-4 text-left flex items-center justify-between hover:bg-gray-700/50 transition-colors duration-200 cursor-pointer">
			<div class="flex items-center space-x-4 flex-wrap">
				<span class={ "px-2 py-1 text-xs font-bold rounded-md", getStatusColor(entry.Status) }>{ fmt.Sprintf("%d", entry.Status) }</span>
				<span class="text-gray-400 font-mono text-sm">{ entry.Timestamp.Format(time.Kitchen) }</span>
				<span class="text-white font-medium">{ entry.Service }</span> 
				<span class="text-gray-400">{ entry.Method }</span>
			</div>
			<div class="flex items-center space-x-2 flex-shrink-0 ml-4">
				<span class="text-sm text-gray-500">{ fmt.Sprintf("%dms", entry.Duration) }</span>
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5 text-gray-400 transition-transform duration-300 group-open:rotate-180"><path d="m6 9 6 6 6-6"></path></svg>
			</div>
		</summary>
		<div class="p-4 border-t border-gray-700 bg-gray-900/50">
			<div class="space-y-8">
				<div>
					<h4 class="text-lg font-semibold text-gray-300 mb-3">Request</h4>
					<div class="space-y-4">
						<div>
							<h5 class="text-md font-medium text-gray-400 mb-2">Headers</h5>
							<pre class="bg-gray-800 p-3 rounded-md text-sm text-gray-300 overflow-x-auto"><code>{ formatHeaders(entry.RequestHeaders) }</code></pre>
						</div>
						<div>
							<h5 class="text-md font-medium text-gray-400 mb-2">Body</h5>
							<pre class="bg-gray-800 p-3 rounded-md text-sm text-gray-300 overflow-x-auto"><code>{ prettyPrintJSON(entry.RequestBody) }</code></pre>
						</div>
					</div>
				</div>
				<div>
					<h4 class="text-lg font-semibold text-gray-300 mb-3">Response</h4>
					<div class="space-y-4">
						<div>
							<h5 class="text-md font-medium text-gray-400 mb-2">Headers</h5>
							<pre class="bg-gray-800 p-3 rounded-md text-sm text-gray-300 overflow-x-auto"><code>{ formatHeaders(entry.ResponseHeaders) }</code></pre>
						</div>
						<div>
							<h5 class="text-md font-medium text-gray-400 mb-2">Body</h5>
							<pre class="bg-gray-800 p-3 rounded-md text-sm text-gray-300 overflow-x-auto"><code>{ prettyPrintJSON(entry.ResponseBody) }</code></pre>
						</div>
					</div>
				</div>
			</div>
		</div>
	</details>
}
