// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.924
package partials

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/sudorandom/fauxrpc/private/log"

// in partials/requestlog.templ
func RequestLog(history []*log.LogEntry) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"sse-controller\" hx-ext=\"sse\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = requestLog(history).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func requestLog(history []*log.LogEntry) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div><div class=\"flex justify-between items-center mb-6 flex-shrink-0\"><h1 class=\"text-3xl font-bold text-white\">Request Log</h1><div class=\"flex items-center space-x-2 ml-auto\"><!-- Status indicators wrapper --><div id=\"sse-status-connected\" class=\"px-3 py-1 rounded-full text-sm font-semibold bg-green-500 text-green-100 hidden\">Connected</div><div id=\"sse-status-waiting\" class=\"px-3 py-1 rounded-full text-sm font-semibold bg-gray-500 text-gray-100 animate-pulse hidden\">Waiting...</div><div id=\"sse-status-disconnected\" class=\"px-3 py-1 rounded-full text-sm font-semibold bg-red-500 text-red-100 hidden\">Disconnected</div></div></div><div class=\"flex items-center space-x-4 mb-4\"><input type=\"text\" id=\"log-filter-input\" placeholder=\"Filter logs...\" class=\"w-full p-2 bg-gray-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 flex-grow\"><div class=\"flex items-center space-x-4 flex-shrink-0\"><div class=\"relative w-32 h-10\"><!-- Set a fixed height (h-10) to match the clear button's py-2 padding --><button id=\"pause-btn\" class=\"w-full h-full bg-blue-600 hover:bg-blue-500 text-white font-semibold transition-colors flex items-center justify-center whitespace-nowrap absolute inset-0 rounded-lg\" onclick=\"toggleSseStream(this)\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\" class=\"h-5 w-5 inline-block mr-2\"><path d=\"M5.75 3a.75.75 0 0 0-.75.75v12.5c0 .414.336.75.75.75h1.5a.75.75 0 0 0 .75-.75V3.75A.75.75 0 0 0 7.25 3h-1.5ZM12.75 3a.75.75 0 0 0-.75.75v12.5c0 .414.336.75.75.75h1.5a.75.75 0 0 0 .75-.75V3.75a.75.75 0 0 0-.75-.75h-1.5Z\"></path></svg> Pause</button> <button id=\"resume-btn\" class=\"w-full h-full bg-blue-600 hover:bg-blue-500 text-white font-semibold transition-colors flex items-center justify-center whitespace-nowrap absolute inset-0 hidden rounded-lg\" onclick=\"toggleSseStream(this)\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\" class=\"h-5 w-5 inline-block mr-2\"><path d=\"M5.25 5.653c0-1.085 1.172-1.786 2.15-1.142l8.25 4.75a1.125 1.125 0 0 1 0 1.984l-8.25 4.75a1.125 1.125 0 0 1-2.15-1.142V5.653Z\"></path></svg> Resume</button></div><button id=\"clear-btn\" class=\"px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white font-semibold rounded-lg transition-colors\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\" class=\"h-5 w-5 inline-block mr-2\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\"></path></svg> Clear</button></div></div><div id=\"log-container\" class=\"overflow-y-auto pr-2 flex-grow\" sse-swap=\"Request\" hx-swap=\"afterbegin\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if len(history) == 0 {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div id=\"no-entries-placeholder\" class=\"text-gray-400 text-center py-8\">New requests will appear here...</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		for _, entry := range history {
			templ_7745c5c3_Err = LogEntry(entry).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</div><script>\n            var eventSource = null; // Global variable to hold the EventSource\n            var debounceTimeout = null;\n\n            function connectSseStream(filterText = '') {\n                const sseController = document.getElementById('sse-controller');\n                const statusConnected = document.getElementById('sse-status-connected');\n                const statusWaiting = document.getElementById('sse-status-waiting');\n                const statusDisconnected = document.getElementById('sse-status-disconnected');\n                const logContainer = document.getElementById('log-container');\n                const filterInput = document.getElementById('log-filter-input');\n\n                // Close existing connection if any\n                if (eventSource) {\n                    eventSource.close();\n                    eventSource = null;\n                }\n\n                // Clear logs when connecting with a new filter\n                if (logContainer) {\n                    logContainer.innerHTML = '';\n                }\n\n                const url = `/fauxrpc/sse/logs?filter=${encodeURIComponent(filterText)}`;\n\n                // Show connecting indicator\n                if (statusConnected && statusWaiting && statusDisconnected) {\n                    statusConnected.classList.add('hidden');\n                    statusDisconnected.classList.add('hidden');\n                    statusWaiting.classList.remove('hidden');\n                }\n                eventSource = new EventSource(url);\n\n                eventSource.onopen = function() {\n                    console.log('EventSource opened');\n                    if (statusConnected && statusWaiting && statusDisconnected) {\n                        statusWaiting.classList.add('hidden');\n                        statusDisconnected.classList.add('hidden');\n                        statusConnected.classList.remove('hidden');\n                    }\n                };\n\n                eventSource.addEventListener('Request', function(event) {\n                    const tempDiv = document.createElement('div');\n                    tempDiv.innerHTML = event.data;\n                    logContainer.insertAdjacentElement('afterbegin', tempDiv.firstChild);\n\n                    // Hide placeholder\n                    const placeholder = document.getElementById('no-entries-placeholder');\n                    if (placeholder) {\n                        placeholder.classList.add('hidden');\n                    }\n\n                    // Trim logs\n                    const maxItems = 20;\n                    while (logContainer.childElementCount > maxItems) {\n                        logContainer.lastElementChild.remove();\n                    }\n                });\n\n                eventSource.onmessage = function(event) {\n                    // This will catch any 'message' events (i.e., events without an 'event:' field)\n                    // For now, we're not expecting any, but it's good to have.\n                    console.log('Received generic message event:', event);\n                };\n\n                eventSource.onerror = function(error) {\n                    console.error('EventSource error:', error);\n                    if (statusConnected && statusWaiting && statusDisconnected) {\n                        statusWaiting.classList.add('hidden');\n                        statusConnected.classList.add('hidden');\n                        statusDisconnected.classList.remove('hidden');\n                    }\n                    eventSource.close(); // Close on error to prevent continuous errors\n                };\n            }\n\n            // --- Global function for the 'Pause'/'Resume' button ---\n            function toggleSseStream(button) {\n                const filterInput = document.getElementById('log-filter-input');\n                const pauseBtn = document.getElementById('pause-btn');\n                const resumeBtn = document.getElementById('resume-btn');\n                const statusConnected = document.getElementById('sse-status-connected');\n                const statusWaiting = document.getElementById('sse-status-waiting');\n                const statusDisconnected = document.getElementById('sse-status-disconnected');\n\n                if (button.id === 'pause-btn') { // Check button ID instead of textContent\n                    pauseBtn.classList.add('hidden');\n                    resumeBtn.classList.remove('hidden');\n                    if (eventSource) {\n                        eventSource.close();\n                        eventSource = null;\n                    }\n                    // Set status to disconnected\n                    if (statusConnected && statusWaiting && statusDisconnected) {\n                        statusConnected.classList.add('hidden');\n                        statusWaiting.classList.add('hidden');\n                        statusDisconnected.classList.remove('hidden');\n                    }\n                } else { // This is the 'Resume' part (button.id === 'resume-btn')\n                    resumeBtn.classList.add('hidden');\n                    pauseBtn.classList.remove('hidden');\n                    if (statusConnected && statusWaiting && statusDisconnected) {\n                        statusConnected.classList.add('hidden');\n                        statusWaiting.classList.add('hidden');\n                        statusDisconnected.classList.add('hidden');\n                    }\n                    connectSseStream(filterInput.value); // Reconnect with current filter\n                }\n            }\n\n            // --- Component-specific logic, runs immediately on load/swap ---\n            (function() {\n                const sseController = document.getElementById('sse-controller');\n                const logContainer = document.getElementById('log-container');\n                const filterInput = document.getElementById('log-filter-input');\n                const pauseBtn = document.getElementById('pause-btn');\n                const resumeBtn = document.getElementById('resume-btn');\n                const clearBtn = document.getElementById('clear-btn'); // New reference\n                const statusConnected = document.getElementById('sse-status-connected');\n                const statusWaiting = document.getElementById('sse-status-waiting');\n                const statusDisconnected = document.getElementById('sse-status-disconnected');\n\n\n                if (!sseController || !logContainer || !filterInput || !pauseBtn || !resumeBtn || !clearBtn || !statusConnected || !statusWaiting || !statusDisconnected) {\n                    console.error(\"Missing required elements for SSE control.\");\n                    return;\n                }\n\n                // Initial button state\n                pauseBtn.classList.remove('hidden');\n                resumeBtn.classList.add('hidden');\n\n                // Initial connection on page load\n                connectSseStream(filterInput.value);\n\n                // Debounce for filter input\n                filterInput.addEventListener('input', function() {\n                    clearTimeout(debounceTimeout);\n                    debounceTimeout = setTimeout(() => {\n                        // Check if currently paused before reconnecting on filter change\n                        if (pauseBtn.classList.contains('hidden')) { // If pauseBtn is hidden, it means resumeBtn is visible, so it's paused\n                            // Do nothing, stream is paused\n                        } else {\n                            connectSseStream(filterInput.value);\n                        }\n                    }, 300); // 300ms debounce\n                });\n\n                // Clear button logic\n                if (clearBtn) {\n                    clearBtn.addEventListener('click', function() {\n                        logContainer.innerHTML = `\n                            <div id=\"no-entries-placeholder\" class=\"text-gray-400 text-center py-8\">\n                                New requests will appear here...\n                            </div>\n                        `;\n                    });\n                }\n\n                // Log Container Management (trimming)\n                htmx.on(logContainer, 'htmx:afterSwap', function() {\n                    // This listener is still useful if htmx swaps content for other reasons\n                    // or if we decide to re-introduce htmx-driven swaps for SSE messages.\n                    // For now, the onmessage handler directly inserts.\n                    const maxItems = 20;\n                    while (logContainer.childElementCount > maxItems) {\n                        logContainer.lastElementChild.remove();\n                    }\n                });\n\n                // Placeholder management on htmx:sseMessage (now handled in onmessage directly)\n                // htmx.on(controller, 'htmx:sseMessage', function() {\n                //     const placeholder = document.getElementById('no-entries-placeholder');\n                //     if (placeholder) {\n                //         placeholder.classList.add('hidden');\n                //     }\n                // });\n            })();\n        </script></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
