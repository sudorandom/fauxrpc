package celfakeit

import (
	"github.com/brianvoe/gofakeit/v7"
	"github.com/google/cel-go/cel"
	"github.com/google/cel-go/common/types"
	"github.com/google/cel-go/common/types/ref"
)

func Configure() cel.EnvOption {
	return cel.Lib(&gofakeitLib{})
}

type gofakeitLib struct {
}

func (*gofakeitLib) LibraryName() string {
	return "fauxrpc.celfakeit"
}

func (lib *gofakeitLib) CompileOptions() []cel.EnvOption {
	return []cel.EnvOption{
		cel.Function("fake_file_extension",
			cel.Overload("fake_file_extension", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.FileExtension()) }),
			),
		),
		cel.Function("fake_product_name",
			cel.Overload("fake_product_name", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ProductName()) }),
			),
		),
		cel.Function("fake_product_description",
			cel.Overload("fake_product_description", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ProductDescription()) }),
			),
		),
		cel.Function("fake_product_category",
			cel.Overload("fake_product_category", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ProductCategory()) }),
			),
		),
		cel.Function("fake_product_feature",
			cel.Overload("fake_product_feature", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ProductFeature()) }),
			),
		),
		cel.Function("fake_product_material",
			cel.Overload("fake_product_material", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ProductMaterial()) }),
			),
		),
		cel.Function("fake_product_upc",
			cel.Overload("fake_product_upc", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ProductUPC()) }),
			),
		),
		cel.Function("fake_product_audience",
			cel.Overload("fake_product_audience", []*cel.Type{}, cel.ListType(cel.StringType),
				cel.FunctionBinding(func(...ref.Val) ref.Val {
					return types.NewStringList(nil, gofakeit.ProductAudience())
				}),
			),
		),
		cel.Function("fake_product_dimension",
			cel.Overload("fake_product_dimension", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ProductDimension()) }),
			),
		),
		cel.Function("fake_product_usecase",
			cel.Overload("fake_product_usecase", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ProductUseCase()) }),
			),
		),
		cel.Function("fake_product_benefit",
			cel.Overload("fake_product_benefit", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ProductBenefit()) }),
			),
		),
		cel.Function("fake_product_suffix",
			cel.Overload("fake_product_suffix", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ProductSuffix()) }),
			),
		),
		cel.Function("fake_name",
			cel.Overload("fake_name", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Name()) }),
			),
		),
		cel.Function("fake_name_prefix",
			cel.Overload("fake_name_prefix", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.NamePrefix()) }),
			),
		),
		cel.Function("fake_name_suffix",
			cel.Overload("fake_name_suffix", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.NameSuffix()) }),
			),
		),
		cel.Function("fake_first_name",
			cel.Overload("fake_first_name", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.FirstName()) }),
			),
		),
		cel.Function("fake_middle_name",
			cel.Overload("fake_middle_name", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MiddleName()) }),
			),
		),
		cel.Function("fake_last_name",
			cel.Overload("fake_last_name", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.LastName()) }),
			),
		),
		cel.Function("fake_gender",
			cel.Overload("fake_gender", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Gender()) }),
			),
		),
		cel.Function("fake_ssn",
			cel.Overload("fake_ssn", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.SSN()) }),
			),
		),
		cel.Function("fake_hobby",
			cel.Overload("fake_hobby", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Hobby()) }),
			),
		),
		cel.Function("fake_email",
			cel.Overload("fake_email", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Email()) }),
			),
		),
		cel.Function("fake_phone",
			cel.Overload("fake_phone", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Phone()) }),
			),
		),
		cel.Function("fake_phone_formatted",
			cel.Overload("fake_phone_formatted", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.PhoneFormatted()) }),
			),
		),
		cel.Function("fake_username",
			cel.Overload("fake_username", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Username()) }),
			),
		),
		cel.Function("fake_city",
			cel.Overload("fake_city", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.City()) }),
			),
		),
		cel.Function("fake_country",
			cel.Overload("fake_country", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Country()) }),
			),
		),
		cel.Function("fake_country_abr",
			cel.Overload("fake_country_abr", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.CountryAbr()) }),
			),
		),
		cel.Function("fake_state",
			cel.Overload("fake_state", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.State()) }),
			),
		),
		cel.Function("fake_state_abr",
			cel.Overload("fake_state_abr", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.StateAbr()) }),
			),
		),
		cel.Function("fake_street",
			cel.Overload("fake_street", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Street()) }),
			),
		),
		cel.Function("fake_street_name",
			cel.Overload("fake_street_name", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.StreetName()) }),
			),
		),
		cel.Function("fake_street_number",
			cel.Overload("fake_street_number", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.StreetNumber()) }),
			),
		),
		cel.Function("fake_street_prefix",
			cel.Overload("fake_street_prefix", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.StreetPrefix()) }),
			),
		),
		cel.Function("fake_street_suffix",
			cel.Overload("fake_street_suffix", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.StreetSuffix()) }),
			),
		),
		cel.Function("fake_zip",
			cel.Overload("fake_zip", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Zip()) }),
			),
		),
		cel.Function("fake_latitude",
			cel.Overload("fake_latitude", []*cel.Type{}, cel.DoubleType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Double(gofakeit.Latitude()) }),
			),
		),
		cel.Function("fake_longitude",
			cel.Overload("fake_longitude", []*cel.Type{}, cel.DoubleType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Double(gofakeit.Longitude()) }),
			),
		),
		cel.Function("fake_gamertag",
			cel.Overload("fake_gamertag", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Gamertag()) }),
			),
		),
		cel.Function("fake_beer_alcohol",
			cel.Overload("fake_beer_alcohol", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BeerAlcohol()) }),
			),
		),
		cel.Function("fake_beer_blg",
			cel.Overload("fake_beer_blg", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BeerBlg()) }),
			),
		),
		cel.Function("fake_beer_hop",
			cel.Overload("fake_beer_hop", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BeerHop()) }),
			),
		),
		cel.Function("fake_beer_ibu",
			cel.Overload("fake_beer_ibu", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BeerIbu()) }),
			),
		),
		cel.Function("fake_beer_malt",
			cel.Overload("fake_beer_malt", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BeerMalt()) }),
			),
		),
		cel.Function("fake_beer_name",
			cel.Overload("fake_beer_name", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BeerName()) }),
			),
		),
		cel.Function("fake_beer_style",
			cel.Overload("fake_beer_style", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BeerStyle()) }),
			),
		),
		cel.Function("fake_beer_yeast",
			cel.Overload("fake_beer_yeast", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BeerYeast()) }),
			),
		),
		cel.Function("fake_car_maker",
			cel.Overload("fake_car_maker", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.CarMaker()) }),
			),
		),
		cel.Function("fake_car_model",
			cel.Overload("fake_car_model", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.CarModel()) }),
			),
		),
		cel.Function("fake_car_type",
			cel.Overload("fake_car_type", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.CarType()) }),
			),
		),
		cel.Function("fake_car_transmission_type",
			cel.Overload("fake_car_transmission_type", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.CarTransmissionType()) }),
			),
		),
		cel.Function("fake_noun",
			cel.Overload("fake_noun", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Noun()) }),
			),
		),
		cel.Function("fake_noun_common",
			cel.Overload("fake_noun_common", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.NounCommon()) }),
			),
		),
		cel.Function("fake_noun_concrete",
			cel.Overload("fake_noun_concrete", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.NounConcrete()) }),
			),
		),
		cel.Function("fake_noun",
			cel.Overload("fake_noun", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Noun()) }),
			),
		),
		cel.Function("fake_noun_common",
			cel.Overload("fake_noun_common", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.NounCommon()) }),
			),
		),
		cel.Function("fake_noun_concrete",
			cel.Overload("fake_noun_concrete", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.NounConcrete()) }),
			),
		),
		cel.Function("fake_noun_abstract",
			cel.Overload("fake_noun_abstract", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.NounAbstract()) }),
			),
		),
		cel.Function("fake_noun_collective_people",
			cel.Overload("fake_noun_collective_people", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.NounCollectivePeople()) }),
			),
		),
		cel.Function("fake_noun_collective_animal",
			cel.Overload("fake_noun_collective_animal", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.NounCollectiveAnimal()) }),
			),
		),
		cel.Function("fake_noun_collective_thing",
			cel.Overload("fake_noun_collective_thing", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.NounCollectiveThing()) }),
			),
		),
		cel.Function("fake_noun_countable",
			cel.Overload("fake_noun_countable", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.NounCountable()) }),
			),
		),
		cel.Function("fake_noun_uncountable",
			cel.Overload("fake_noun_uncountable", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.NounUncountable()) }),
			),
		),
		cel.Function("fake_verb",
			cel.Overload("fake_verb", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Verb()) }),
			),
		),
		cel.Function("fake_verb_action",
			cel.Overload("fake_verb_action", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.VerbAction()) }),
			),
		),
		cel.Function("fake_verb_linking",
			cel.Overload("fake_verb_linking", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.VerbLinking()) }),
			),
		),
		cel.Function("fake_verb_helping",
			cel.Overload("fake_verb_helping", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.VerbHelping()) }),
			),
		),
		cel.Function("fake_adverb",
			cel.Overload("fake_adverb", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Adverb()) }),
			),
		),
		cel.Function("fake_adverb_manner",
			cel.Overload("fake_adverb_manner", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AdverbManner()) }),
			),
		),
		cel.Function("fake_adverb_degree",
			cel.Overload("fake_adverb_degree", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AdverbDegree()) }),
			),
		),
		cel.Function("fake_adverb_place",
			cel.Overload("fake_adverb_place", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AdverbPlace()) }),
			),
		),
		cel.Function("fake_adverb_time_definite",
			cel.Overload("fake_adverb_time_definite", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AdverbTimeDefinite()) }),
			),
		),
		cel.Function("fake_adverb_time_indefinite",
			cel.Overload("fake_adverb_time_indefinite", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AdverbTimeIndefinite()) }),
			),
		),
		cel.Function("fake_adverb_frequency_definite",
			cel.Overload("fake_adverb_frequency_definite", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AdverbFrequencyDefinite()) }),
			),
		),
		cel.Function("fake_adverb_frequency_indefinite",
			cel.Overload("fake_adverb_frequency_indefinite", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AdverbFrequencyIndefinite()) }),
			),
		),
		cel.Function("fake_preposition",
			cel.Overload("fake_preposition", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Preposition()) }),
			),
		),
		cel.Function("fake_preposition_simple",
			cel.Overload("fake_preposition_simple", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.PrepositionSimple()) }),
			),
		),
		cel.Function("fake_preposition_double",
			cel.Overload("fake_preposition_double", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.PrepositionDouble()) }),
			),
		),
		cel.Function("fake_preposition_compound",
			cel.Overload("fake_preposition_compound", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.PrepositionCompound()) }),
			),
		),
		cel.Function("fake_adjective",
			cel.Overload("fake_adjective", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Adjective()) }),
			),
		),
		cel.Function("fake_adjective_descriptive",
			cel.Overload("fake_adjective_descriptive", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AdjectiveDescriptive()) }),
			),
		),
		cel.Function("fake_adjective_quantitative",
			cel.Overload("fake_adjective_quantitative", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AdjectiveQuantitative()) }),
			),
		),
		cel.Function("fake_adjective_proper",
			cel.Overload("fake_adjective_proper", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AdjectiveProper()) }),
			),
		),
		cel.Function("fake_adjective_demonstrative",
			cel.Overload("fake_adjective_demonstrative", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AdjectiveDemonstrative()) }),
			),
		),
		cel.Function("fake_adjective_possessive",
			cel.Overload("fake_adjective_possessive", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AdjectivePossessive()) }),
			),
		),
		cel.Function("fake_adjective_interrogative",
			cel.Overload("fake_adjective_interrogative", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AdjectiveInterrogative()) }),
			),
		),
		cel.Function("fake_adjective_indefinite",
			cel.Overload("fake_adjective_indefinite", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AdjectiveIndefinite()) }),
			),
		),
		cel.Function("fake_pronoun",
			cel.Overload("fake_pronoun", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Pronoun()) }),
			),
		),
		cel.Function("fake_pronoun_personal",
			cel.Overload("fake_pronoun_personal", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.PronounPersonal()) }),
			),
		),
		cel.Function("fake_pronoun_object",
			cel.Overload("fake_pronoun_object", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.PronounObject()) }),
			),
		),
		cel.Function("fake_pronoun_possessive",
			cel.Overload("fake_pronoun_possessive", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.PronounPossessive()) }),
			),
		),
		cel.Function("fake_pronoun_reflective",
			cel.Overload("fake_pronoun_reflective", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.PronounReflective()) }),
			),
		),
		cel.Function("fake_pronoun_demonstrative",
			cel.Overload("fake_pronoun_demonstrative", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.PronounDemonstrative()) }),
			),
		),
		cel.Function("fake_pronoun_interrogative",
			cel.Overload("fake_pronoun_interrogative", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.PronounInterrogative()) }),
			),
		),
		cel.Function("fake_pronoun_relative",
			cel.Overload("fake_pronoun_relative", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.PronounRelative()) }),
			),
		),
		cel.Function("fake_connective",
			cel.Overload("fake_connective", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Connective()) }),
			),
		),
		cel.Function("fake_connective_time",
			cel.Overload("fake_connective_time", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ConnectiveTime()) }),
			),
		),
		cel.Function("fake_connective_comparative",
			cel.Overload("fake_connective_comparative", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ConnectiveComparative()) }),
			),
		),
		cel.Function("fake_connective_complaint",
			cel.Overload("fake_connective_complaint", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ConnectiveComplaint()) }),
			),
		),
		cel.Function("fake_connective_listing",
			cel.Overload("fake_connective_listing", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ConnectiveListing()) }),
			),
		),
		cel.Function("fake_connective_casual",
			cel.Overload("fake_connective_casual", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ConnectiveCasual()) }),
			),
		),
		cel.Function("fake_connective_examplify",
			cel.Overload("fake_connective_examplify", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ConnectiveExamplify()) }),
			),
		),
		cel.Function("fake_lorem_ipsum_word",
			cel.Overload("fake_lorem_ipsum_word", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.LoremIpsumWord()) }),
			),
		),
		cel.Function("fake_question",
			cel.Overload("fake_question", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Question()) }),
			),
		),
		cel.Function("fake_quote",
			cel.Overload("fake_quote", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Quote()) }),
			),
		),
		cel.Function("fake_phrase",
			cel.Overload("fake_phrase", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Phrase()) }),
			),
		),
		cel.Function("fake_fruit",
			cel.Overload("fake_fruit", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Fruit()) }),
			),
		),
		cel.Function("fake_vegetable",
			cel.Overload("fake_vegetable", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Vegetable()) }),
			),
		),
		cel.Function("fake_breakfast",
			cel.Overload("fake_breakfast", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Breakfast()) }),
			),
		),
		cel.Function("fake_lunch",
			cel.Overload("fake_lunch", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Lunch()) }),
			),
		),
		cel.Function("fake_dinner",
			cel.Overload("fake_dinner", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Dinner()) }),
			),
		),
		cel.Function("fake_snack",
			cel.Overload("fake_snack", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Snack()) }),
			),
		),
		cel.Function("fake_dessert",
			cel.Overload("fake_dessert", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Dessert()) }),
			),
		),
		cel.Function("fake_bool",
			cel.Overload("fake_bool", []*cel.Type{}, cel.BoolType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Bool(gofakeit.Bool()) }),
			),
		),
		cel.Function("fake_uuid",
			cel.Overload("fake_uuid", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.UUID()) }),
			),
		),
		cel.Function("fake_flip_a_coin",
			cel.Overload("fake_flip_a_coin", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.FlipACoin()) }),
			),
		),
		cel.Function("fake_color",
			cel.Overload("fake_color", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Color()) }),
			),
		),
		cel.Function("fake_hex_color",
			cel.Overload("fake_hex_color", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.HexColor()) }),
			),
		),
		cel.Function("fake_safe_color",
			cel.Overload("fake_safe_color", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.SafeColor()) }),
			),
		),
		cel.Function("fake_url",
			cel.Overload("fake_url", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.URL()) }),
			),
		),
		cel.Function("fake_domain_name",
			cel.Overload("fake_domain_name", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.DomainName()) }),
			),
		),
		cel.Function("fake_domain_suffix",
			cel.Overload("fake_domain_suffix", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.DomainSuffix()) }),
			),
		),
		cel.Function("fake_i_pv4_address",
			cel.Overload("fake_i_pv4_address", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.IPv4Address()) }),
			),
		),
		cel.Function("fake_i_pv6_address",
			cel.Overload("fake_i_pv6_address", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.IPv6Address()) }),
			),
		),
		cel.Function("fake_mac_address",
			cel.Overload("fake_mac_address", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MacAddress()) }),
			),
		),
		cel.Function("fake_http_status_code",
			cel.Overload("fake_http_status_code", []*cel.Type{}, cel.IntType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.HTTPStatusCode()) }),
			),
		),
		cel.Function("fake_http_status_code_simple",
			cel.Overload("fake_http_status_code_simple", []*cel.Type{}, cel.IntType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.HTTPStatusCodeSimple()) }),
			),
		),
		cel.Function("fake_http_method",
			cel.Overload("fake_http_method", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.HTTPMethod()) }),
			),
		),
		cel.Function("fake_http_version",
			cel.Overload("fake_http_version", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.HTTPVersion()) }),
			),
		),
		cel.Function("fake_user_agent",
			cel.Overload("fake_user_agent", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.UserAgent()) }),
			),
		),
		cel.Function("fake_chrome_user_agent",
			cel.Overload("fake_chrome_user_agent", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ChromeUserAgent()) }),
			),
		),
		cel.Function("fake_firefox_user_agent",
			cel.Overload("fake_firefox_user_agent", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.FirefoxUserAgent()) }),
			),
		),
		cel.Function("fake_opera_user_agent",
			cel.Overload("fake_opera_user_agent", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.OperaUserAgent()) }),
			),
		),
		cel.Function("fake_safari_user_agent",
			cel.Overload("fake_safari_user_agent", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.SafariUserAgent()) }),
			),
		),
		cel.Function("fake_input_name",
			cel.Overload("fake_input_name", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.InputName()) }),
			),
		),
		cel.Function("fake_date",
			cel.Overload("fake_date", []*cel.Type{}, cel.TimestampType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Timestamp{Time: gofakeit.Date()} }),
			),
		),
		cel.Function("fake_past_date",
			cel.Overload("fake_past_date", []*cel.Type{}, cel.TimestampType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Timestamp{Time: gofakeit.PastDate()} }),
			),
		),
		cel.Function("fake_future_date",
			cel.Overload("fake_future_date", []*cel.Type{}, cel.TimestampType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Timestamp{Time: gofakeit.FutureDate()} }),
			),
		),
		cel.Function("fake_nanosecond",
			cel.Overload("fake_nanosecond", []*cel.Type{}, cel.IntType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.NanoSecond()) }),
			),
		),
		cel.Function("fake_second",
			cel.Overload("fake_second", []*cel.Type{}, cel.IntType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Second()) }),
			),
		),
		cel.Function("fake_minute",
			cel.Overload("fake_minute", []*cel.Type{}, cel.IntType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Minute()) }),
			),
		),
		cel.Function("fake_hour",
			cel.Overload("fake_hour", []*cel.Type{}, cel.IntType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Hour()) }),
			),
		),
		cel.Function("fake_month",
			cel.Overload("fake_month", []*cel.Type{}, cel.IntType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Month()) }),
			),
		),
		cel.Function("fake_month_string",
			cel.Overload("fake_month_string", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MonthString()) }),
			),
		),
		cel.Function("fake_day",
			cel.Overload("fake_day", []*cel.Type{}, cel.IntType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Day()) }),
			),
		),
		cel.Function("fake_week_day",
			cel.Overload("fake_week_day", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.WeekDay()) }),
			),
		),
		cel.Function("fake_year",
			cel.Overload("fake_year", []*cel.Type{}, cel.IntType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Year()) }),
			),
		),
		cel.Function("fake_time_zone",
			cel.Overload("fake_time_zone", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.TimeZone()) }),
			),
		),
		cel.Function("fake_time_zone_abv",
			cel.Overload("fake_time_zone_abv", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.TimeZoneAbv()) }),
			),
		),
		cel.Function("fake_time_zone_full",
			cel.Overload("fake_time_zone_full", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.TimeZoneFull()) }),
			),
		),
		cel.Function("fake_time_offset",
			cel.Overload("fake_time_offset", []*cel.Type{}, cel.DoubleType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Double(gofakeit.TimeZoneOffset()) }),
			),
		),
		cel.Function("fake_time_zone_region",
			cel.Overload("fake_time_zone_region", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.TimeZoneRegion()) }),
			),
		),
		cel.Function("fake_credit_card_cvv",
			cel.Overload("fake_credit_card_cvv", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.CreditCardCvv()) }),
			),
		),
		cel.Function("fake_credit_card_exp",
			cel.Overload("fake_credit_card_exp", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.CreditCardExp()) }),
			),
		),
		cel.Function("fake_credit_card_type",
			cel.Overload("fake_credit_card_type", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.CreditCardType()) }),
			),
		),
		cel.Function("fake_currency_long",
			cel.Overload("fake_currency_long", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.CurrencyLong()) }),
			),
		),
		cel.Function("fake_currency_short",
			cel.Overload("fake_currency_short", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.CurrencyShort()) }),
			),
		),
		cel.Function("fake_ach_routing",
			cel.Overload("fake_ach_routing", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AchRouting()) }),
			),
		),
		cel.Function("fake_ach_account",
			cel.Overload("fake_ach_account", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AchAccount()) }),
			),
		),
		cel.Function("fake_bitcoin_address",
			cel.Overload("fake_bitcoin_address", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BitcoinAddress()) }),
			),
		),
		cel.Function("fake_bitcoin_private_key",
			cel.Overload("fake_bitcoin_private_key", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BitcoinPrivateKey()) }),
			),
		),
		cel.Function("fake_cusip",
			cel.Overload("fake_cusip", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Cusip()) }),
			),
		),
		cel.Function("fake_isin",
			cel.Overload("fake_isin", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Isin()) }),
			),
		),
		cel.Function("fake_bs",
			cel.Overload("fake_bs", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BS()) }),
			),
		),
		cel.Function("fake_blurb",
			cel.Overload("fake_blurb", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Blurb()) }),
			),
		),
		cel.Function("fake_buzz_word",
			cel.Overload("fake_buzz_word", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BuzzWord()) }),
			),
		),
		cel.Function("fake_company",
			cel.Overload("fake_company", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Company()) }),
			),
		),
		cel.Function("fake_company_suffix",
			cel.Overload("fake_company_suffix", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.CompanySuffix()) }),
			),
		),
		cel.Function("fake_job_descriptor",
			cel.Overload("fake_job_descriptor", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.JobDescriptor()) }),
			),
		),
		cel.Function("fake_job_level",
			cel.Overload("fake_job_level", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.JobLevel()) }),
			),
		),
		cel.Function("fake_job_title",
			cel.Overload("fake_job_title", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.JobTitle()) }),
			),
		),
		cel.Function("fake_slogan",
			cel.Overload("fake_slogan", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Slogan()) }),
			),
		),
		cel.Function("fake_hacker_abbreviation",
			cel.Overload("fake_hacker_abbreviation", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.HackerAbbreviation()) }),
			),
		),
		cel.Function("fake_hacker_adjective",
			cel.Overload("fake_hacker_adjective", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.HackerAdjective()) }),
			),
		),
		cel.Function("fake_hackering_verb",
			cel.Overload("fake_hackering_verb", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.HackerVerb()) }),
			),
		),
		cel.Function("fake_hacker_noun",
			cel.Overload("fake_hacker_noun", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.HackerNoun()) }),
			),
		),
		cel.Function("fake_hacker_phrase",
			cel.Overload("fake_hacker_phrase", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.HackerPhrase()) }),
			),
		),
		cel.Function("fake_hacker_verb",
			cel.Overload("fake_hacker_verb", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.HackerVerb()) }),
			),
		),
		cel.Function("fake_hipster_word",
			cel.Overload("fake_hipster_word", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.HipsterWord()) }),
			),
		),
		cel.Function("fake_app_name",
			cel.Overload("fake_app_name", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AppName()) }),
			),
		),
		cel.Function("fake_app_version",
			cel.Overload("fake_app_version", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AppVersion()) }),
			),
		),
		cel.Function("fake_app_author",
			cel.Overload("fake_app_author", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AppAuthor()) }),
			),
		),
		cel.Function("fake_pet_name",
			cel.Overload("fake_pet_name", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.PetName()) }),
			),
		),
		cel.Function("fake_animal",
			cel.Overload("fake_animal", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Animal()) }),
			),
		),
		cel.Function("fake_animal_type",
			cel.Overload("fake_animal_type", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.AnimalType()) }),
			),
		),
		cel.Function("fake_farm_animal",
			cel.Overload("fake_farm_animal", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.FarmAnimal()) }),
			),
		),
		cel.Function("fake_cat",
			cel.Overload("fake_cat", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Cat()) }),
			),
		),
		cel.Function("fake_dog",
			cel.Overload("fake_dog", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Dog()) }),
			),
		),
		cel.Function("fake_bird",
			cel.Overload("fake_bird", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Bird()) }),
			),
		),
		cel.Function("fake_emoji",
			cel.Overload("fake_emoji", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Emoji()) }),
			),
		),
		cel.Function("fake_emoji_description",
			cel.Overload("fake_emoji_description", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.EmojiDescription()) }),
			),
		),
		cel.Function("fake_emoji_category",
			cel.Overload("fake_emoji_category", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.EmojiCategory()) }),
			),
		),
		cel.Function("fake_emoji_alias",
			cel.Overload("fake_emoji_alias", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.EmojiAlias()) }),
			),
		),
		cel.Function("fake_emoji_tag",
			cel.Overload("fake_emoji_tag", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.EmojiTag()) }),
			),
		),
		cel.Function("fake_language",
			cel.Overload("fake_language", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Language()) }),
			),
		),
		cel.Function("fake_language_abbreviation",
			cel.Overload("fake_language_abbreviation", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.LanguageAbbreviation()) }),
			),
		),
		cel.Function("fake_programming_language",
			cel.Overload("fake_programming_language", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ProgrammingLanguage()) }),
			),
		),
		cel.Function("fake_programming_language_best",
			cel.Overload("fake_programming_language_best", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.ProgrammingLanguage()) }),
			),
		),
		cel.Function("fake_int",
			cel.Overload("fake_int", []*cel.Type{}, cel.IntType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Int()) }),
			),
		),
		cel.Function("fake_intn",
			cel.Overload("fake_intn_int", []*cel.Type{cel.IntType}, cel.IntType,
				cel.UnaryBinding(func(n ref.Val) ref.Val { return types.Int(gofakeit.IntN(int(n.Value().(int64)))) }),
			),
		),
		cel.Function("fake_int8",
			cel.Overload("fake_int8", []*cel.Type{}, cel.IntType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Int8()) }),
			),
		),
		cel.Function("fake_int16",
			cel.Overload("fake_int16", []*cel.Type{}, cel.IntType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Int16()) }),
			),
		),
		cel.Function("fake_int32",
			cel.Overload("fake_int32", []*cel.Type{}, cel.IntType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Int32()) }),
			),
		),
		cel.Function("fake_int64",
			cel.Overload("fake_int64", []*cel.Type{}, cel.IntType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Int64()) }),
			),
		),

		cel.Function("fake_uint",
			cel.Overload("fake_uint", []*cel.Type{}, cel.UintType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Uint()) }),
			),
		),
		cel.Function("fake_uintn",
			cel.Overload("fake_uintn_uint", []*cel.Type{cel.UintType}, cel.UintType,
				cel.UnaryBinding(func(n ref.Val) ref.Val { return types.Int(gofakeit.UintN(n.Value().(uint))) }),
			),
			cel.Overload("fake_uintn_int", []*cel.Type{cel.IntType}, cel.UintType,
				cel.UnaryBinding(func(n ref.Val) ref.Val { return types.Int(gofakeit.UintN(uint(n.Value().(int64)))) }),
			),
		),
		cel.Function("fake_uint8",
			cel.Overload("fake_uint8", []*cel.Type{}, cel.UintType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Uint8()) }),
			),
		),
		cel.Function("fake_uint16",
			cel.Overload("fake_uint16", []*cel.Type{}, cel.UintType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Uint16()) }),
			),
		),
		cel.Function("fake_uint32",
			cel.Overload("fake_uint32", []*cel.Type{}, cel.UintType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Uint32()) }),
			),
		),
		cel.Function("fake_uint64",
			cel.Overload("fake_uint64", []*cel.Type{}, cel.UintType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Int(gofakeit.Uint64()) }),
			),
		),
		cel.Function("fake_float32",
			cel.Overload("fake_float32", []*cel.Type{}, cel.DoubleType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Double(gofakeit.Float32()) }),
			),
		),
		cel.Function("fake_float64",
			cel.Overload("fake_float64", []*cel.Type{}, cel.DoubleType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.Double(gofakeit.Float64()) }),
			),
		),

		cel.Function("fake_digit",
			cel.Overload("fake_digit", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Digit()) }),
			),
		),
		cel.Function("fake_letter",
			cel.Overload("fake_letter", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.Letter()) }),
			),
		),
		cel.Function("fake_celebrity_actor",
			cel.Overload("fake_celebrity_actor", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.CelebrityActor()) }),
			),
		),
		cel.Function("fake_celebrity_business",
			cel.Overload("fake_celebrity_business", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.CelebrityBusiness()) }),
			),
		),
		cel.Function("fake_celebrity_sport",
			cel.Overload("fake_celebrity_sport", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.CelebritySport()) }),
			),
		),
		cel.Function("fake_minecraft_ore",
			cel.Overload("fake_minecraft_ore", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftOre()) }),
			),
		),
		cel.Function("fake_minecraft_wood",
			cel.Overload("fake_minecraft_wood", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftWood()) }),
			),
		),
		cel.Function("fake_minecraft_armor_tier",
			cel.Overload("fake_minecraft_armor_tier", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftArmorTier()) }),
			),
		),
		cel.Function("fake_minecraft_armor_part",
			cel.Overload("fake_minecraft_armor_part", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftArmorPart()) }),
			),
		),
		cel.Function("fake_minecraft_weapon",
			cel.Overload("fake_minecraft_weapon", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftWeapon()) }),
			),
		),
		cel.Function("fake_minecraft_tool",
			cel.Overload("fake_minecraft_tool", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftTool()) }),
			),
		),
		cel.Function("fake_minecraft_dye",
			cel.Overload("fake_minecraft_dye", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftDye()) }),
			),
		),
		cel.Function("fake_minecraft_food",
			cel.Overload("fake_minecraft_food", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftFood()) }),
			),
		),
		cel.Function("fake_minecraft_animal",
			cel.Overload("fake_minecraft_animal", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftAnimal()) }),
			),
		),
		cel.Function("fake_minecraft_villager_job",
			cel.Overload("fake_minecraft_villager_job", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftVillagerJob()) }),
			),
		),
		cel.Function("fake_minecraft_villager_station",
			cel.Overload("fake_minecraft_villager_station", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftVillagerStation()) }),
			),
		),
		cel.Function("fake_minecraft_villager_level",
			cel.Overload("fake_minecraft_villager_level", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftVillagerLevel()) }),
			),
		),
		cel.Function("fake_minecraft_mob_passive",
			cel.Overload("fake_minecraft_mob_passive", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftMobPassive()) }),
			),
		),
		cel.Function("fake_minecraft_mob_neutral",
			cel.Overload("fake_minecraft_mob_neutral", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftMobNeutral()) }),
			),
		),
		cel.Function("fake_minecraft_mob_hostile",
			cel.Overload("fake_minecraft_mob_hostile", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftMobHostile()) }),
			),
		),
		cel.Function("fake_minecraft_mob_boss",
			cel.Overload("fake_minecraft_mob_boss", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftMobBoss()) }),
			),
		),
		cel.Function("fake_minecraft_biome",
			cel.Overload("fake_minecraft_biome", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftBiome()) }),
			),
		),
		cel.Function("fake_minecraft_weather",
			cel.Overload("fake_minecraft_weather", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MinecraftWeather()) }),
			),
		),
		cel.Function("fake_book_title",
			cel.Overload("fake_book_title", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BookTitle()) }),
			),
		),
		cel.Function("fake_book_author",
			cel.Overload("fake_book_author", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BookAuthor()) }),
			),
		),
		cel.Function("fake_book_genre",
			cel.Overload("fake_book_genre", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.BookGenre()) }),
			),
		),
		cel.Function("fake_movie_name",
			cel.Overload("fake_movie_name", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MovieName()) }),
			),
		),
		cel.Function("fake_movie_genre",
			cel.Overload("fake_movie_genre", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.MovieGenre()) }),
			),
		),
		cel.Function("fake_school",
			cel.Overload("fake_school", []*cel.Type{}, cel.StringType,
				cel.FunctionBinding(func(...ref.Val) ref.Val { return types.String(gofakeit.School()) }),
			),
		),
	}
}

func (*gofakeitLib) ProgramOptions() []cel.ProgramOption {
	return []cel.ProgramOption{}
}
